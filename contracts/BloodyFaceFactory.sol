// SPDX-License-Identifier: MIT
pragma solidity ^0.8.3;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract BloodyFace is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable {
  using Counters for Counters.Counter;

  Counters.Counter private _tokenIdCounter;

  uint256 private _totalSupply = 3333;

  string private _apiUrl = "https://bloodyfaces.io/api/nft/";

  constructor() ERC721("BloodyFace", "BLDFC") {}

  function mintBloodyFace() public payable returns (uint256) {
    require(_tokenIdCounter.current() < _totalSupply, "All the Bloody Faces have been minted.");
    require(balanceOf(msg.sender) < 3, "You already own 3 Bloody Faces.");
    require(msg.value == 0.03 ether, "Price is 0.03ETH.");

    uint256 newNftId = _tokenIdCounter.current();

    _mint(msg.sender, newNftId);
    _setTokenURI(newNftId, string(abi.encodePacked(_apiUrl, _uint2str(_tokenIdCounter.current()))));

    _tokenIdCounter.increment();

    return newNftId;
  }

  function setApiUrl(string memory _newUrl) public onlyOwner {
    _apiUrl = _newUrl;
  }

  function getApiUrl() public view returns (string memory) {
    return _apiUrl;
  }

  function getBalance() public view returns (uint256) {
    return address(this).balance;
  }

  function withdrawFunds() public onlyOwner {
    uint256 balance = getBalance();

    payable(msg.sender).transfer(balance);
    emit Transfer(address(this), msg.sender, balance);
  }

  function _uint2str(uint _i) internal pure returns (string memory _uintAsString) {
    if (_i == 0) {
      return "0";
    }
    uint j = _i;
    uint len;
    while (j != 0) {
      len++;
      j /= 10;
    }
    bytes memory bstr = new bytes(len);
    uint k = len;
    while (_i != 0) {
      k = k-1;
      uint8 temp = (48 + uint8(_i - _i / 10 * 10));
      bytes1 b1 = bytes1(temp);
      bstr[k] = b1;
      _i /= 10;
    }
    return string(bstr);
  }

  // The following functions are overrides required by Solidity.
  // This is generated by OpenZeppelin.

  function _beforeTokenTransfer(address from, address to, uint256 tokenId)
    internal
    override(ERC721, ERC721Enumerable)
  {
    super._beforeTokenTransfer(from, to, tokenId);
  }

  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
    super._burn(tokenId);
  }

  function tokenURI(uint256 tokenId)
    public
    view
    override(ERC721, ERC721URIStorage)
    returns (string memory)
  {
    return super.tokenURI(tokenId);
  }

  function supportsInterface(bytes4 interfaceId)
    public
    view
    override(ERC721, ERC721Enumerable)
    returns (bool)
  {
    return super.supportsInterface(interfaceId);
  }
}
